// ─────────────────────────────────────────────────────────────────────────────
// UI AGENT GLOBAL STORE
// This file acts as the central source of truth for the application's UI state.
// It defines the data structures for devices and UI nodes and exports a series
// of Svelte stores that any component can subscribe to. This approach ensures
// that when a piece of state changes (e.g., the user selects a new device),
// all components that depend on that state will update automatically and
// efficiently.
// ─────────────────────────────────────────────────────────────────────────────

import { writable } from 'svelte/store';

// -----------------------------------------------------------------------------
// INTERFACES
// We use TypeScript interfaces to define the "shape" of our data. This
// provides type safety and makes the code easier to understand and maintain.
// -----------------------------------------------------------------------------

/** Represents a single connected Android device. */
export interface DeviceInfo {
    serial: string;           // Unique ADB serial number
    model?: string;          // Friendly model name (e.g., "Pixel 6")
    [extra: string]: any;    // Allows for any other metadata from the backend
}

/** Represents a single node (or element) in the UI hierarchy tree. */
export interface NodeInfo {
    key: string;                                  // A unique identifier for this node within the tree
    name: string;                                 // The element's class or tag name (e.g., "android.widget.Button")
    bounds?: [number, number, number, number];    // Normalized coordinates [x1, y1, x2, y2] from 0 to 1
    rect?: { x: number; y: number; width: number; height: number }; // Absolute pixel coordinates
    children: NodeInfo[];                         // An array of child nodes
    properties?: { [prop: string]: any };         // A dictionary of attributes (text, resource-id, etc.)
}

// -----------------------------------------------------------------------------
// DEVICE & SELECTION STORES
// These stores track the list of available devices and the user's current
// selections.
// -----------------------------------------------------------------------------

/** A writable store holding the full list of devices from `/api/android/list`. */
export const devices = writable<DeviceInfo[]>([]);

/** A writable store holding the serial number of the currently selected device. */
export const selectedSerial = writable<string>('');

/** A writable store for the single node the user last clicked. */
export const selectedNode = writable<NodeInfo | null>(null);

/** A writable store for the node the mouse is currently hovering over. */
export const hoveredNode = writable<NodeInfo | null>(null);

// -----------------------------------------------------------------------------
// MULTI-SELECT MODE STORES
// These stores manage the state when a user holds Ctrl/Cmd to select multiple
// elements on the screen, which is essential context for the LLM.
// -----------------------------------------------------------------------------

/** A boolean store that is `true` when multi-select mode is active. */
export const multiSelectMode = writable<boolean>(false);

/** A store holding an array of all nodes selected in multi-select mode. */
export const multiSelectedNodes = writable<NodeInfo[]>([]);


// -----------------------------------------------------------------------------
// FUTURE FEATURE PREPARATION: CODE GENERATION
// As requested, we're planning for a Playwright-style code generation feature.
// We can prepare for that by creating a store to hold the generated script.
// When the codegen feature is built, it will write to this store, and the
// Python Console component can listen to it.
// -----------------------------------------------------------------------------

/**
 * A store to hold code generated by an automated process (e.g., codegen).
 * This will allow the CodeGen module to produce a script and have the
 * PythonConsole/CodeEditor automatically display it.
 */
export const generatedCode = writable<string>('');

